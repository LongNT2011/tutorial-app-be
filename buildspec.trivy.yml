version: 0.2
env:
  variables:
    BeImageName: "local-be-image"
phases:
  pre_build:
    commands:
      - echo "Setting up buildx builder for multi-platform support..."
      - export BUILDX_VERSION=$(curl --silent "https://api.github.com/repos/docker/buildx/releases/latest" |jq -r .tag_name)
      - curl -JLO "https://github.com/docker/buildx/releases/download/$BUILDX_VERSION/buildx-$BUILDX_VERSION.linux-amd64"
      - mkdir -p ~/.docker/cli-plugins
      - mv "buildx-$BUILDX_VERSION.linux-amd64" ~/.docker/cli-plugins/docker-buildx
      - chmod +x ~/.docker/cli-plugins/docker-buildx
      - docker run --privileged --rm tonistiigi/binfmt --install arm64
      - echo Creating buildx builder...
      - docker buildx create --use
      - apt-get install wget apt-transport-https gnupg lsb-release -y
      - wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
      - echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
      - apt-get update
      - apt-get install trivy -y
      - trivy version
  build:
    commands:
      - echo "Building the Docker image for Trivy scan..."
      - docker buildx build --platform linux/arm64/v8 -t $BeImageName:latest --load .
      - echo "Scanning image for vulnerabilities with Trivy..."
      - trivy image --severity HIGH,CRITICAL -f json -o results.json $BeImageName:latest
      - echo "Checking Trivy scan results..."
      - cat results.json
      - |
        if [ "$(jq '.Results | length' results.json)" -eq 0 ]; then
          echo "PASS: No HIGH or CRITICAL vulnerabilities found in Trivy scan."
        else
          echo "FAIL: Vulnerabilities found! Please check the scan report."
          jq '.Results[] | {Target, Vulnerabilities: .Vulnerabilities[] | select(.Severity=="HIGH" or .Severity=="CRITICAL") | {VulnerabilityID, PkgName, Severity, Description}}' results.json
          exit 1
        fi
  post_build:
    commands:
      - echo "Deleting image after scan..."
      - docker rmi $BeImageName:latest || true
